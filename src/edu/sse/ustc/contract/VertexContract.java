/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.sse.ustc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VertexContract implements org.apache.thrift.TBase<VertexContract, VertexContract._Fields>, java.io.Serializable, Cloneable, Comparable<VertexContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VertexContract");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mapID", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VERTEX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("vertexType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("X", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("Y", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField Z_FIELD_DESC = new org.apache.thrift.protocol.TField("Z", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VertexContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VertexContractTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public int mapID; // required
  public int objectID; // required
  /**
   * 
   * @see VertexType
   */
  public VertexType vertexType; // required
  /**
   * 
   * @see LocContract.CoordinateType
   */
  public CoordinateType type; // required
  public int X; // required
  public int Y; // required
  public int Z; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    MAP_ID((short)3, "mapID"),
    OBJECT_ID((short)4, "objectID"),
    /**
     * 
     * @see VertexType
     */
    VERTEX_TYPE((short)5, "vertexType"),
    /**
     * 
     * @see LocContract.CoordinateType
     */
    TYPE((short)6, "type"),
    X((short)7, "X"),
    Y((short)8, "Y"),
    Z((short)9, "Z");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // MAP_ID
          return MAP_ID;
        case 4: // OBJECT_ID
          return OBJECT_ID;
        case 5: // VERTEX_TYPE
          return VERTEX_TYPE;
        case 6: // TYPE
          return TYPE;
        case 7: // X
          return X;
        case 8: // Y
          return Y;
        case 9: // Z
          return Z;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MAPID_ISSET_ID = 1;
  private static final int __OBJECTID_ISSET_ID = 2;
  private static final int __X_ISSET_ID = 3;
  private static final int __Y_ISSET_ID = 4;
  private static final int __Z_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("mapID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERTEX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("vertexType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, VertexType.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CoordinateType.class)));
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("X", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("Y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Z, new org.apache.thrift.meta_data.FieldMetaData("Z", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VertexContract.class, metaDataMap);
  }

  public VertexContract() {
  }

  public VertexContract(
    int id,
    String name,
    int mapID,
    int objectID,
    VertexType vertexType,
    CoordinateType type,
    int X,
    int Y,
    int Z)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.mapID = mapID;
    setMapIDIsSet(true);
    this.objectID = objectID;
    setObjectIDIsSet(true);
    this.vertexType = vertexType;
    this.type = type;
    this.X = X;
    setXIsSet(true);
    this.Y = Y;
    setYIsSet(true);
    this.Z = Z;
    setZIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VertexContract(VertexContract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.mapID = other.mapID;
    this.objectID = other.objectID;
    if (other.isSetVertexType()) {
      this.vertexType = other.vertexType;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.X = other.X;
    this.Y = other.Y;
    this.Z = other.Z;
  }

  public VertexContract deepCopy() {
    return new VertexContract(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setMapIDIsSet(false);
    this.mapID = 0;
    setObjectIDIsSet(false);
    this.objectID = 0;
    this.vertexType = null;
    this.type = null;
    setXIsSet(false);
    this.X = 0;
    setYIsSet(false);
    this.Y = 0;
    setZIsSet(false);
    this.Z = 0;
  }

  public int getId() {
    return this.id;
  }

  public VertexContract setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public VertexContract setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMapID() {
    return this.mapID;
  }

  public VertexContract setMapID(int mapID) {
    this.mapID = mapID;
    setMapIDIsSet(true);
    return this;
  }

  public void unsetMapID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPID_ISSET_ID);
  }

  /** Returns true if field mapID is set (has been assigned a value) and false otherwise */
  public boolean isSetMapID() {
    return EncodingUtils.testBit(__isset_bitfield, __MAPID_ISSET_ID);
  }

  public void setMapIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPID_ISSET_ID, value);
  }

  public int getObjectID() {
    return this.objectID;
  }

  public VertexContract setObjectID(int objectID) {
    this.objectID = objectID;
    setObjectIDIsSet(true);
    return this;
  }

  public void unsetObjectID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJECTID_ISSET_ID);
  }

  /** Returns true if field objectID is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectID() {
    return EncodingUtils.testBit(__isset_bitfield, __OBJECTID_ISSET_ID);
  }

  public void setObjectIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJECTID_ISSET_ID, value);
  }

  /**
   * 
   * @see VertexType
   */
  public VertexType getVertexType() {
    return this.vertexType;
  }

  /**
   * 
   * @see VertexType
   */
  public VertexContract setVertexType(VertexType vertexType) {
    this.vertexType = vertexType;
    return this;
  }

  public void unsetVertexType() {
    this.vertexType = null;
  }

  /** Returns true if field vertexType is set (has been assigned a value) and false otherwise */
  public boolean isSetVertexType() {
    return this.vertexType != null;
  }

  public void setVertexTypeIsSet(boolean value) {
    if (!value) {
      this.vertexType = null;
    }
  }

  /**
   * 
   * @see LocContract.CoordinateType
   */
  public CoordinateType getType() {
    return this.type;
  }

  /**
   * 
   * @see LocContract.CoordinateType
   */
  public VertexContract setType(CoordinateType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getX() {
    return this.X;
  }

  public VertexContract setX(int X) {
    this.X = X;
    setXIsSet(true);
    return this;
  }

  public void unsetX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
  }

  /** Returns true if field X is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
  }

  public void setXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
  }

  public int getY() {
    return this.Y;
  }

  public VertexContract setY(int Y) {
    this.Y = Y;
    setYIsSet(true);
    return this;
  }

  public void unsetY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
  }

  /** Returns true if field Y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
  }

  public void setYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
  }

  public int getZ() {
    return this.Z;
  }

  public VertexContract setZ(int Z) {
    this.Z = Z;
    setZIsSet(true);
    return this;
  }

  public void unsetZ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Z_ISSET_ID);
  }

  /** Returns true if field Z is set (has been assigned a value) and false otherwise */
  public boolean isSetZ() {
    return EncodingUtils.testBit(__isset_bitfield, __Z_ISSET_ID);
  }

  public void setZIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Z_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MAP_ID:
      if (value == null) {
        unsetMapID();
      } else {
        setMapID((Integer)value);
      }
      break;

    case OBJECT_ID:
      if (value == null) {
        unsetObjectID();
      } else {
        setObjectID((Integer)value);
      }
      break;

    case VERTEX_TYPE:
      if (value == null) {
        unsetVertexType();
      } else {
        setVertexType((VertexType)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CoordinateType)value);
      }
      break;

    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((Integer)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((Integer)value);
      }
      break;

    case Z:
      if (value == null) {
        unsetZ();
      } else {
        setZ((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case MAP_ID:
      return Integer.valueOf(getMapID());

    case OBJECT_ID:
      return Integer.valueOf(getObjectID());

    case VERTEX_TYPE:
      return getVertexType();

    case TYPE:
      return getType();

    case X:
      return Integer.valueOf(getX());

    case Y:
      return Integer.valueOf(getY());

    case Z:
      return Integer.valueOf(getZ());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case MAP_ID:
      return isSetMapID();
    case OBJECT_ID:
      return isSetObjectID();
    case VERTEX_TYPE:
      return isSetVertexType();
    case TYPE:
      return isSetType();
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case Z:
      return isSetZ();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VertexContract)
      return this.equals((VertexContract)that);
    return false;
  }

  public boolean equals(VertexContract that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mapID = true;
    boolean that_present_mapID = true;
    if (this_present_mapID || that_present_mapID) {
      if (!(this_present_mapID && that_present_mapID))
        return false;
      if (this.mapID != that.mapID)
        return false;
    }

    boolean this_present_objectID = true;
    boolean that_present_objectID = true;
    if (this_present_objectID || that_present_objectID) {
      if (!(this_present_objectID && that_present_objectID))
        return false;
      if (this.objectID != that.objectID)
        return false;
    }

    boolean this_present_vertexType = true && this.isSetVertexType();
    boolean that_present_vertexType = true && that.isSetVertexType();
    if (this_present_vertexType || that_present_vertexType) {
      if (!(this_present_vertexType && that_present_vertexType))
        return false;
      if (!this.vertexType.equals(that.vertexType))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_X = true;
    boolean that_present_X = true;
    if (this_present_X || that_present_X) {
      if (!(this_present_X && that_present_X))
        return false;
      if (this.X != that.X)
        return false;
    }

    boolean this_present_Y = true;
    boolean that_present_Y = true;
    if (this_present_Y || that_present_Y) {
      if (!(this_present_Y && that_present_Y))
        return false;
      if (this.Y != that.Y)
        return false;
    }

    boolean this_present_Z = true;
    boolean that_present_Z = true;
    if (this_present_Z || that_present_Z) {
      if (!(this_present_Z && that_present_Z))
        return false;
      if (this.Z != that.Z)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(VertexContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapID()).compareTo(other.isSetMapID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapID, other.mapID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjectID()).compareTo(other.isSetObjectID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectID, other.objectID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVertexType()).compareTo(other.isSetVertexType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVertexType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertexType, other.vertexType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.X, other.X);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Y, other.Y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZ()).compareTo(other.isSetZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Z, other.Z);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VertexContract(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapID:");
    sb.append(this.mapID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("objectID:");
    sb.append(this.objectID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vertexType:");
    if (this.vertexType == null) {
      sb.append("null");
    } else {
      sb.append(this.vertexType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("X:");
    sb.append(this.X);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Y:");
    sb.append(this.Y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Z:");
    sb.append(this.Z);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VertexContractStandardSchemeFactory implements SchemeFactory {
    public VertexContractStandardScheme getScheme() {
      return new VertexContractStandardScheme();
    }
  }

  private static class VertexContractStandardScheme extends StandardScheme<VertexContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VertexContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapID = iprot.readI32();
              struct.setMapIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.objectID = iprot.readI32();
              struct.setObjectIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERTEX_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vertexType = VertexType.findByValue(iprot.readI32());
              struct.setVertexTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = CoordinateType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.X = iprot.readI32();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Y = iprot.readI32();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // Z
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Z = iprot.readI32();
              struct.setZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VertexContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAP_ID_FIELD_DESC);
      oprot.writeI32(struct.mapID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.objectID);
      oprot.writeFieldEnd();
      if (struct.vertexType != null) {
        oprot.writeFieldBegin(VERTEX_TYPE_FIELD_DESC);
        oprot.writeI32(struct.vertexType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(struct.X);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(struct.Y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Z_FIELD_DESC);
      oprot.writeI32(struct.Z);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VertexContractTupleSchemeFactory implements SchemeFactory {
    public VertexContractTupleScheme getScheme() {
      return new VertexContractTupleScheme();
    }
  }

  private static class VertexContractTupleScheme extends TupleScheme<VertexContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VertexContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMapID()) {
        optionals.set(2);
      }
      if (struct.isSetObjectID()) {
        optionals.set(3);
      }
      if (struct.isSetVertexType()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetX()) {
        optionals.set(6);
      }
      if (struct.isSetY()) {
        optionals.set(7);
      }
      if (struct.isSetZ()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMapID()) {
        oprot.writeI32(struct.mapID);
      }
      if (struct.isSetObjectID()) {
        oprot.writeI32(struct.objectID);
      }
      if (struct.isSetVertexType()) {
        oprot.writeI32(struct.vertexType.getValue());
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetX()) {
        oprot.writeI32(struct.X);
      }
      if (struct.isSetY()) {
        oprot.writeI32(struct.Y);
      }
      if (struct.isSetZ()) {
        oprot.writeI32(struct.Z);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VertexContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mapID = iprot.readI32();
        struct.setMapIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.objectID = iprot.readI32();
        struct.setObjectIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vertexType = VertexType.findByValue(iprot.readI32());
        struct.setVertexTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = CoordinateType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.X = iprot.readI32();
        struct.setXIsSet(true);
      }
      if (incoming.get(7)) {
        struct.Y = iprot.readI32();
        struct.setYIsSet(true);
      }
      if (incoming.get(8)) {
        struct.Z = iprot.readI32();
        struct.setZIsSet(true);
      }
    }
  }

}

