/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.sse.ustc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PointContract implements org.apache.thrift.TBase<PointContract, PointContract._Fields>, java.io.Serializable, Cloneable, Comparable<PointContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PointContract");

  private static final org.apache.thrift.protocol.TField MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mapId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField Z_FIELD_DESC = new org.apache.thrift.protocol.TField("z", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CELL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cellId", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PointContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PointContractTupleSchemeFactory());
  }

  public int mapId; // required
  /**
   * 
   * @see CoordinateType
   */
  public CoordinateType type; // required
  public int x; // required
  public int y; // required
  public int z; // required
  public int cellId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAP_ID((short)1, "mapId"),
    /**
     * 
     * @see CoordinateType
     */
    TYPE((short)2, "type"),
    X((short)3, "x"),
    Y((short)4, "y"),
    Z((short)5, "z"),
    CELL_ID((short)6, "cellId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAP_ID
          return MAP_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // X
          return X;
        case 4: // Y
          return Y;
        case 5: // Z
          return Z;
        case 6: // CELL_ID
          return CELL_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAPID_ISSET_ID = 0;
  private static final int __X_ISSET_ID = 1;
  private static final int __Y_ISSET_ID = 2;
  private static final int __Z_ISSET_ID = 3;
  private static final int __CELLID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("mapId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CoordinateType.class)));
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Z, new org.apache.thrift.meta_data.FieldMetaData("z", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CELL_ID, new org.apache.thrift.meta_data.FieldMetaData("cellId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PointContract.class, metaDataMap);
  }

  public PointContract() {
  }

  public PointContract(
    int mapId,
    CoordinateType type,
    int x,
    int y,
    int z,
    int cellId)
  {
    this();
    this.mapId = mapId;
    setMapIdIsSet(true);
    this.type = type;
    this.x = x;
    setXIsSet(true);
    this.y = y;
    setYIsSet(true);
    this.z = z;
    setZIsSet(true);
    this.cellId = cellId;
    setCellIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PointContract(PointContract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mapId = other.mapId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    this.cellId = other.cellId;
  }

  public PointContract deepCopy() {
    return new PointContract(this);
  }

  @Override
  public void clear() {
    setMapIdIsSet(false);
    this.mapId = 0;
    this.type = null;
    setXIsSet(false);
    this.x = 0;
    setYIsSet(false);
    this.y = 0;
    setZIsSet(false);
    this.z = 0;
    setCellIdIsSet(false);
    this.cellId = 0;
  }

  public int getMapId() {
    return this.mapId;
  }

  public PointContract setMapId(int mapId) {
    this.mapId = mapId;
    setMapIdIsSet(true);
    return this;
  }

  public void unsetMapId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPID_ISSET_ID);
  }

  /** Returns true if field mapId is set (has been assigned a value) and false otherwise */
  public boolean isSetMapId() {
    return EncodingUtils.testBit(__isset_bitfield, __MAPID_ISSET_ID);
  }

  public void setMapIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPID_ISSET_ID, value);
  }

  /**
   * 
   * @see CoordinateType
   */
  public CoordinateType getType() {
    return this.type;
  }

  /**
   * 
   * @see CoordinateType
   */
  public PointContract setType(CoordinateType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getX() {
    return this.x;
  }

  public PointContract setX(int x) {
    this.x = x;
    setXIsSet(true);
    return this;
  }

  public void unsetX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
  }

  public void setXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
  }

  public int getY() {
    return this.y;
  }

  public PointContract setY(int y) {
    this.y = y;
    setYIsSet(true);
    return this;
  }

  public void unsetY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
  }

  public void setYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
  }

  public int getZ() {
    return this.z;
  }

  public PointContract setZ(int z) {
    this.z = z;
    setZIsSet(true);
    return this;
  }

  public void unsetZ() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Z_ISSET_ID);
  }

  /** Returns true if field z is set (has been assigned a value) and false otherwise */
  public boolean isSetZ() {
    return EncodingUtils.testBit(__isset_bitfield, __Z_ISSET_ID);
  }

  public void setZIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Z_ISSET_ID, value);
  }

  public int getCellId() {
    return this.cellId;
  }

  public PointContract setCellId(int cellId) {
    this.cellId = cellId;
    setCellIdIsSet(true);
    return this;
  }

  public void unsetCellId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CELLID_ISSET_ID);
  }

  /** Returns true if field cellId is set (has been assigned a value) and false otherwise */
  public boolean isSetCellId() {
    return EncodingUtils.testBit(__isset_bitfield, __CELLID_ISSET_ID);
  }

  public void setCellIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CELLID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAP_ID:
      if (value == null) {
        unsetMapId();
      } else {
        setMapId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CoordinateType)value);
      }
      break;

    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((Integer)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((Integer)value);
      }
      break;

    case Z:
      if (value == null) {
        unsetZ();
      } else {
        setZ((Integer)value);
      }
      break;

    case CELL_ID:
      if (value == null) {
        unsetCellId();
      } else {
        setCellId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAP_ID:
      return Integer.valueOf(getMapId());

    case TYPE:
      return getType();

    case X:
      return Integer.valueOf(getX());

    case Y:
      return Integer.valueOf(getY());

    case Z:
      return Integer.valueOf(getZ());

    case CELL_ID:
      return Integer.valueOf(getCellId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAP_ID:
      return isSetMapId();
    case TYPE:
      return isSetType();
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case Z:
      return isSetZ();
    case CELL_ID:
      return isSetCellId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PointContract)
      return this.equals((PointContract)that);
    return false;
  }

  public boolean equals(PointContract that) {
    if (that == null)
      return false;

    boolean this_present_mapId = true;
    boolean that_present_mapId = true;
    if (this_present_mapId || that_present_mapId) {
      if (!(this_present_mapId && that_present_mapId))
        return false;
      if (this.mapId != that.mapId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_x = true;
    boolean that_present_x = true;
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (this.x != that.x)
        return false;
    }

    boolean this_present_y = true;
    boolean that_present_y = true;
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (this.y != that.y)
        return false;
    }

    boolean this_present_z = true;
    boolean that_present_z = true;
    if (this_present_z || that_present_z) {
      if (!(this_present_z && that_present_z))
        return false;
      if (this.z != that.z)
        return false;
    }

    boolean this_present_cellId = true;
    boolean that_present_cellId = true;
    if (this_present_cellId || that_present_cellId) {
      if (!(this_present_cellId && that_present_cellId))
        return false;
      if (this.cellId != that.cellId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PointContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMapId()).compareTo(other.isSetMapId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapId, other.mapId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZ()).compareTo(other.isSetZ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.z, other.z);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCellId()).compareTo(other.isSetCellId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCellId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellId, other.cellId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PointContract(");
    boolean first = true;

    sb.append("mapId:");
    sb.append(this.mapId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("x:");
    sb.append(this.x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    sb.append(this.y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("z:");
    sb.append(this.z);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cellId:");
    sb.append(this.cellId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PointContractStandardSchemeFactory implements SchemeFactory {
    public PointContractStandardScheme getScheme() {
      return new PointContractStandardScheme();
    }
  }

  private static class PointContractStandardScheme extends StandardScheme<PointContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PointContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapId = iprot.readI32();
              struct.setMapIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = CoordinateType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.x = iprot.readI32();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.y = iprot.readI32();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // Z
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.z = iprot.readI32();
              struct.setZIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CELL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cellId = iprot.readI32();
              struct.setCellIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PointContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAP_ID_FIELD_DESC);
      oprot.writeI32(struct.mapId);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(struct.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(struct.y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Z_FIELD_DESC);
      oprot.writeI32(struct.z);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CELL_ID_FIELD_DESC);
      oprot.writeI32(struct.cellId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PointContractTupleSchemeFactory implements SchemeFactory {
    public PointContractTupleScheme getScheme() {
      return new PointContractTupleScheme();
    }
  }

  private static class PointContractTupleScheme extends TupleScheme<PointContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PointContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMapId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetX()) {
        optionals.set(2);
      }
      if (struct.isSetY()) {
        optionals.set(3);
      }
      if (struct.isSetZ()) {
        optionals.set(4);
      }
      if (struct.isSetCellId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMapId()) {
        oprot.writeI32(struct.mapId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetX()) {
        oprot.writeI32(struct.x);
      }
      if (struct.isSetY()) {
        oprot.writeI32(struct.y);
      }
      if (struct.isSetZ()) {
        oprot.writeI32(struct.z);
      }
      if (struct.isSetCellId()) {
        oprot.writeI32(struct.cellId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PointContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.mapId = iprot.readI32();
        struct.setMapIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = CoordinateType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.x = iprot.readI32();
        struct.setXIsSet(true);
      }
      if (incoming.get(3)) {
        struct.y = iprot.readI32();
        struct.setYIsSet(true);
      }
      if (incoming.get(4)) {
        struct.z = iprot.readI32();
        struct.setZIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cellId = iprot.readI32();
        struct.setCellIdIsSet(true);
      }
    }
  }

}

