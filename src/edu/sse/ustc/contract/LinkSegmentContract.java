/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.sse.ustc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LinkSegmentContract implements org.apache.thrift.TBase<LinkSegmentContract, LinkSegmentContract._Fields>, java.io.Serializable,
        Cloneable, Comparable<LinkSegmentContract>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LinkSegmentContract");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id",
            org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name",
            org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField VERTICES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("verticesList",
            org.apache.thrift.protocol.TType.LIST, (short) 3);
    private static final org.apache.thrift.protocol.TField MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mapId",
            org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark",
            org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField LINKED_MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkedMapId",
            org.apache.thrift.protocol.TType.I32, (short) 6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static
    {
        schemes.put(StandardScheme.class, new LinkSegmentContractStandardSchemeFactory());
        schemes.put(TupleScheme.class, new LinkSegmentContractTupleSchemeFactory());
    }

    public int id; // required
    public String name; // required
    public List<PointContract> verticesList; // required
    public int mapId; // required
    public String remark; // required
    public int linkedMapId; // required

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        ID((short) 1, "id"), NAME((short) 2, "name"), VERTICES_LIST((short) 3, "verticesList"), MAP_ID((short) 4, "mapId"), REMARK((short) 5,
                "remark"), LINKED_MAP_ID((short) 6, "linkedMapId");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
                case 1: // ID
                    return ID;
                case 2: // NAME
                    return NAME;
                case 3: // VERTICES_LIST
                    return VERTICES_LIST;
                case 4: // MAP_ID
                    return MAP_ID;
                case 5: // REMARK
                    return REMARK;
                case 6: // LINKED_MAP_ID
                    return LINKED_MAP_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __MAPID_ISSET_ID = 1;
    private static final int __LINKEDMAPID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.VERTICES_LIST, new org.apache.thrift.meta_data.FieldMetaData("verticesList",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PointContract.class))));
        tmpMap.put(_Fields.MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("mapId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.LINKED_MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("linkedMapId",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LinkSegmentContract.class, metaDataMap);
    }

    public LinkSegmentContract()
    {
    }

    public LinkSegmentContract(int id, String name, List<PointContract> verticesList, int mapId, String remark, int linkedMapId)
    {
        this();
        this.id = id;
        setIdIsSet(true);
        this.name = name;
        this.verticesList = verticesList;
        this.mapId = mapId;
        setMapIdIsSet(true);
        this.remark = remark;
        this.linkedMapId = linkedMapId;
        setLinkedMapIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LinkSegmentContract(LinkSegmentContract other)
    {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetName())
        {
            this.name = other.name;
        }
        if (other.isSetVerticesList())
        {
            List<PointContract> __this__verticesList = new ArrayList<PointContract>(other.verticesList.size());
            for (PointContract other_element : other.verticesList)
            {
                __this__verticesList.add(new PointContract(other_element));
            }
            this.verticesList = __this__verticesList;
        }
        this.mapId = other.mapId;
        if (other.isSetRemark())
        {
            this.remark = other.remark;
        }
        this.linkedMapId = other.linkedMapId;
    }

    public LinkSegmentContract deepCopy()
    {
        return new LinkSegmentContract(this);
    }

    @Override
    public void clear()
    {
        setIdIsSet(false);
        this.id = 0;
        this.name = null;
        this.verticesList = null;
        setMapIdIsSet(false);
        this.mapId = 0;
        this.remark = null;
        setLinkedMapIdIsSet(false);
        this.linkedMapId = 0;
    }

    public int getId()
    {
        return this.id;
    }

    public LinkSegmentContract setId(int id)
    {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /**
     * Returns true if field id is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetId()
    {
        return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getName()
    {
        return this.name;
    }

    public LinkSegmentContract setName(String name)
    {
        this.name = name;
        return this;
    }

    public void unsetName()
    {
        this.name = null;
    }

    /**
     * Returns true if field name is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetName()
    {
        return this.name != null;
    }

    public void setNameIsSet(boolean value)
    {
        if (!value)
        {
            this.name = null;
        }
    }

    public int getVerticesListSize()
    {
        return (this.verticesList == null) ? 0 : this.verticesList.size();
    }

    public java.util.Iterator<PointContract> getVerticesListIterator()
    {
        return (this.verticesList == null) ? null : this.verticesList.iterator();
    }

    public void addToVerticesList(PointContract elem)
    {
        if (this.verticesList == null)
        {
            this.verticesList = new ArrayList<PointContract>();
        }
        this.verticesList.add(elem);
    }

    public List<PointContract> getVerticesList()
    {
        return this.verticesList;
    }

    public LinkSegmentContract setVerticesList(List<PointContract> verticesList)
    {
        this.verticesList = verticesList;
        return this;
    }

    public void unsetVerticesList()
    {
        this.verticesList = null;
    }

    /**
     * Returns true if field verticesList is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetVerticesList()
    {
        return this.verticesList != null;
    }

    public void setVerticesListIsSet(boolean value)
    {
        if (!value)
        {
            this.verticesList = null;
        }
    }

    public int getMapId()
    {
        return this.mapId;
    }

    public LinkSegmentContract setMapId(int mapId)
    {
        this.mapId = mapId;
        setMapIdIsSet(true);
        return this;
    }

    public void unsetMapId()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPID_ISSET_ID);
    }

    /**
     * Returns true if field mapId is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetMapId()
    {
        return EncodingUtils.testBit(__isset_bitfield, __MAPID_ISSET_ID);
    }

    public void setMapIdIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPID_ISSET_ID, value);
    }

    public String getRemark()
    {
        return this.remark;
    }

    public LinkSegmentContract setRemark(String remark)
    {
        this.remark = remark;
        return this;
    }

    public void unsetRemark()
    {
        this.remark = null;
    }

    /**
     * Returns true if field remark is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetRemark()
    {
        return this.remark != null;
    }

    public void setRemarkIsSet(boolean value)
    {
        if (!value)
        {
            this.remark = null;
        }
    }

    public int getLinkedMapId()
    {
        return this.linkedMapId;
    }

    public LinkSegmentContract setLinkedMapId(int linkedMapId)
    {
        this.linkedMapId = linkedMapId;
        setLinkedMapIdIsSet(true);
        return this;
    }

    public void unsetLinkedMapId()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKEDMAPID_ISSET_ID);
    }

    /**
     * Returns true if field linkedMapId is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetLinkedMapId()
    {
        return EncodingUtils.testBit(__isset_bitfield, __LINKEDMAPID_ISSET_ID);
    }

    public void setLinkedMapIdIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKEDMAPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
            case ID:
                if (value == null)
                {
                    unsetId();
                }
                else
                {
                    setId((Integer) value);
                }
                break;

            case NAME:
                if (value == null)
                {
                    unsetName();
                }
                else
                {
                    setName((String) value);
                }
                break;

            case VERTICES_LIST:
                if (value == null)
                {
                    unsetVerticesList();
                }
                else
                {
                    setVerticesList((List<PointContract>) value);
                }
                break;

            case MAP_ID:
                if (value == null)
                {
                    unsetMapId();
                }
                else
                {
                    setMapId((Integer) value);
                }
                break;

            case REMARK:
                if (value == null)
                {
                    unsetRemark();
                }
                else
                {
                    setRemark((String) value);
                }
                break;

            case LINKED_MAP_ID:
                if (value == null)
                {
                    unsetLinkedMapId();
                }
                else
                {
                    setLinkedMapId((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
            case ID:
                return Integer.valueOf(getId());

            case NAME:
                return getName();

            case VERTICES_LIST:
                return getVerticesList();

            case MAP_ID:
                return Integer.valueOf(getMapId());

            case REMARK:
                return getRemark();

            case LINKED_MAP_ID:
                return Integer.valueOf(getLinkedMapId());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned
     * a value) and false otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
            case ID:
                return isSetId();
            case NAME:
                return isSetName();
            case VERTICES_LIST:
                return isSetVerticesList();
            case MAP_ID:
                return isSetMapId();
            case REMARK:
                return isSetRemark();
            case LINKED_MAP_ID:
                return isSetLinkedMapId();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null) return false;
        if (that instanceof LinkSegmentContract) return this.equals((LinkSegmentContract) that);
        return false;
    }

    public boolean equals(LinkSegmentContract that)
    {
        if (that == null) return false;

        boolean this_present_id = true;
        boolean that_present_id = true;
        if (this_present_id || that_present_id)
        {
            if (!(this_present_id && that_present_id)) return false;
            if (this.id != that.id) return false;
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name)
        {
            if (!(this_present_name && that_present_name)) return false;
            if (!this.name.equals(that.name)) return false;
        }

        boolean this_present_verticesList = true && this.isSetVerticesList();
        boolean that_present_verticesList = true && that.isSetVerticesList();
        if (this_present_verticesList || that_present_verticesList)
        {
            if (!(this_present_verticesList && that_present_verticesList)) return false;
            if (!this.verticesList.equals(that.verticesList)) return false;
        }

        boolean this_present_mapId = true;
        boolean that_present_mapId = true;
        if (this_present_mapId || that_present_mapId)
        {
            if (!(this_present_mapId && that_present_mapId)) return false;
            if (this.mapId != that.mapId) return false;
        }

        boolean this_present_remark = true && this.isSetRemark();
        boolean that_present_remark = true && that.isSetRemark();
        if (this_present_remark || that_present_remark)
        {
            if (!(this_present_remark && that_present_remark)) return false;
            if (!this.remark.equals(that.remark)) return false;
        }

        boolean this_present_linkedMapId = true;
        boolean that_present_linkedMapId = true;
        if (this_present_linkedMapId || that_present_linkedMapId)
        {
            if (!(this_present_linkedMapId && that_present_linkedMapId)) return false;
            if (this.linkedMapId != that.linkedMapId) return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    @Override
    public int compareTo(LinkSegmentContract other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetId())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetName())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetVerticesList()).compareTo(other.isSetVerticesList());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetVerticesList())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verticesList, other.verticesList);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMapId()).compareTo(other.isSetMapId());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetMapId())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapId, other.mapId);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetRemark())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLinkedMapId()).compareTo(other.isSetLinkedMapId());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetLinkedMapId())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkedMapId, other.linkedMapId);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("LinkSegmentContract(");
        boolean first = true;

        sb.append("id:");
        sb.append(this.id);
        first = false;
        if (!first) sb.append(", ");
        sb.append("name:");
        if (this.name == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.name);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("verticesList:");
        if (this.verticesList == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.verticesList);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("mapId:");
        sb.append(this.mapId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("remark:");
        if (this.remark == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.remark);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("linkedMapId:");
        sb.append(this.linkedMapId);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java
            // serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private static class LinkSegmentContractStandardSchemeFactory implements SchemeFactory
    {
        public LinkSegmentContractStandardScheme getScheme()
        {
            return new LinkSegmentContractStandardScheme();
        }
    }

    private static class LinkSegmentContractStandardScheme extends StandardScheme<LinkSegmentContract>
    {

        public void read(org.apache.thrift.protocol.TProtocol iprot, LinkSegmentContract struct) throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                {
                    break;
                }
                switch (schemeField.id)
                {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                        {
                            struct.id = iprot.readI32();
                            struct.setIdIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // VERTICES_LIST
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
                        {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.verticesList = new ArrayList<PointContract>(_list0.size);
                                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                                {
                                    PointContract _elem2;
                                    _elem2 = new PointContract();
                                    _elem2.read(iprot);
                                    struct.verticesList.add(_elem2);
                                }
                                iprot.readListEnd();
                            }
                            struct.setVerticesListIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // MAP_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                        {
                            struct.mapId = iprot.readI32();
                            struct.setMapIdIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // REMARK
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.remark = iprot.readString();
                            struct.setRemarkIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // LINKED_MAP_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                        {
                            struct.linkedMapId = iprot.readI32();
                            struct.setLinkedMapIdIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, LinkSegmentContract struct) throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ID_FIELD_DESC);
            oprot.writeI32(struct.id);
            oprot.writeFieldEnd();
            if (struct.name != null)
            {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.verticesList != null)
            {
                oprot.writeFieldBegin(VERTICES_LIST_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.verticesList.size()));
                    for (PointContract _iter3 : struct.verticesList)
                    {
                        _iter3.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(MAP_ID_FIELD_DESC);
            oprot.writeI32(struct.mapId);
            oprot.writeFieldEnd();
            if (struct.remark != null)
            {
                oprot.writeFieldBegin(REMARK_FIELD_DESC);
                oprot.writeString(struct.remark);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(LINKED_MAP_ID_FIELD_DESC);
            oprot.writeI32(struct.linkedMapId);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class LinkSegmentContractTupleSchemeFactory implements SchemeFactory
    {
        public LinkSegmentContractTupleScheme getScheme()
        {
            return new LinkSegmentContractTupleScheme();
        }
    }

    private static class LinkSegmentContractTupleScheme extends TupleScheme<LinkSegmentContract>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, LinkSegmentContract struct) throws org.apache.thrift.TException
        {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetId())
            {
                optionals.set(0);
            }
            if (struct.isSetName())
            {
                optionals.set(1);
            }
            if (struct.isSetVerticesList())
            {
                optionals.set(2);
            }
            if (struct.isSetMapId())
            {
                optionals.set(3);
            }
            if (struct.isSetRemark())
            {
                optionals.set(4);
            }
            if (struct.isSetLinkedMapId())
            {
                optionals.set(5);
            }
            oprot.writeBitSet(optionals, 6);
            if (struct.isSetId())
            {
                oprot.writeI32(struct.id);
            }
            if (struct.isSetName())
            {
                oprot.writeString(struct.name);
            }
            if (struct.isSetVerticesList())
            {
                {
                    oprot.writeI32(struct.verticesList.size());
                    for (PointContract _iter4 : struct.verticesList)
                    {
                        _iter4.write(oprot);
                    }
                }
            }
            if (struct.isSetMapId())
            {
                oprot.writeI32(struct.mapId);
            }
            if (struct.isSetRemark())
            {
                oprot.writeString(struct.remark);
            }
            if (struct.isSetLinkedMapId())
            {
                oprot.writeI32(struct.linkedMapId);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, LinkSegmentContract struct) throws org.apache.thrift.TException
        {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(6);
            if (incoming.get(0))
            {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1))
            {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(2))
            {
                {
                    org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
                            iprot.readI32());
                    struct.verticesList = new ArrayList<PointContract>(_list5.size);
                    for (int _i6 = 0; _i6 < _list5.size; ++_i6)
                    {
                        PointContract _elem7;
                        _elem7 = new PointContract();
                        _elem7.read(iprot);
                        struct.verticesList.add(_elem7);
                    }
                }
                struct.setVerticesListIsSet(true);
            }
            if (incoming.get(3))
            {
                struct.mapId = iprot.readI32();
                struct.setMapIdIsSet(true);
            }
            if (incoming.get(4))
            {
                struct.remark = iprot.readString();
                struct.setRemarkIsSet(true);
            }
            if (incoming.get(5))
            {
                struct.linkedMapId = iprot.readI32();
                struct.setLinkedMapIdIsSet(true);
            }
        }
    }

}
