/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.sse.ustc.contract;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class APContract implements org.apache.thrift.TBase<APContract, APContract._Fields>, java.io.Serializable, Cloneable, Comparable<APContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("APContract");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField POS_FIELD_DESC = new org.apache.thrift.protocol.TField("pos", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("productModel", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IP4_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("ip4Addr", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IP6_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("ip6Addr", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("apType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField EXT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("extInfo", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new APContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new APContractTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public String mac; // required
  /**
   * 
   * @see DevStatus
   */
  public DevStatus status; // required
  public PointContract pos; // required
  public String productModel; // required
  public String ip4Addr; // required
  public String ip6Addr; // required
  public String remark; // required
  /**
   * 
   * @see APType
   */
  public APType apType; // required
  public RfidApContract extInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    MAC((short)3, "mac"),
    /**
     * 
     * @see DevStatus
     */
    STATUS((short)4, "status"),
    POS((short)5, "pos"),
    PRODUCT_MODEL((short)6, "productModel"),
    IP4_ADDR((short)7, "ip4Addr"),
    IP6_ADDR((short)8, "ip6Addr"),
    REMARK((short)9, "remark"),
    /**
     * 
     * @see APType
     */
    AP_TYPE((short)10, "apType"),
    EXT_INFO((short)11, "extInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // MAC
          return MAC;
        case 4: // STATUS
          return STATUS;
        case 5: // POS
          return POS;
        case 6: // PRODUCT_MODEL
          return PRODUCT_MODEL;
        case 7: // IP4_ADDR
          return IP4_ADDR;
        case 8: // IP6_ADDR
          return IP6_ADDR;
        case 9: // REMARK
          return REMARK;
        case 10: // AP_TYPE
          return AP_TYPE;
        case 11: // EXT_INFO
          return EXT_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DevStatus.class)));
    tmpMap.put(_Fields.POS, new org.apache.thrift.meta_data.FieldMetaData("pos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PointContract.class)));
    tmpMap.put(_Fields.PRODUCT_MODEL, new org.apache.thrift.meta_data.FieldMetaData("productModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP4_ADDR, new org.apache.thrift.meta_data.FieldMetaData("ip4Addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP6_ADDR, new org.apache.thrift.meta_data.FieldMetaData("ip6Addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("apType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, APType.class)));
    tmpMap.put(_Fields.EXT_INFO, new org.apache.thrift.meta_data.FieldMetaData("extInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RfidApContract.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(APContract.class, metaDataMap);
  }

  public APContract() {
  }

  public APContract(
    int id,
    String name,
    String mac,
    DevStatus status,
    PointContract pos,
    String productModel,
    String ip4Addr,
    String ip6Addr,
    String remark,
    APType apType,
    RfidApContract extInfo)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.mac = mac;
    this.status = status;
    this.pos = pos;
    this.productModel = productModel;
    this.ip4Addr = ip4Addr;
    this.ip6Addr = ip6Addr;
    this.remark = remark;
    this.apType = apType;
    this.extInfo = extInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public APContract(APContract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetPos()) {
      this.pos = new PointContract(other.pos);
    }
    if (other.isSetProductModel()) {
      this.productModel = other.productModel;
    }
    if (other.isSetIp4Addr()) {
      this.ip4Addr = other.ip4Addr;
    }
    if (other.isSetIp6Addr()) {
      this.ip6Addr = other.ip6Addr;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetApType()) {
      this.apType = other.apType;
    }
    if (other.isSetExtInfo()) {
      this.extInfo = new RfidApContract(other.extInfo);
    }
  }

  public APContract deepCopy() {
    return new APContract(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.mac = null;
    this.status = null;
    this.pos = null;
    this.productModel = null;
    this.ip4Addr = null;
    this.ip6Addr = null;
    this.remark = null;
    this.apType = null;
    this.extInfo = null;
  }

  public int getId() {
    return this.id;
  }

  public APContract setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public APContract setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getMac() {
    return this.mac;
  }

  public APContract setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been assigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  /**
   * 
   * @see DevStatus
   */
  public DevStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see DevStatus
   */
  public APContract setStatus(DevStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public PointContract getPos() {
    return this.pos;
  }

  public APContract setPos(PointContract pos) {
    this.pos = pos;
    return this;
  }

  public void unsetPos() {
    this.pos = null;
  }

  /** Returns true if field pos is set (has been assigned a value) and false otherwise */
  public boolean isSetPos() {
    return this.pos != null;
  }

  public void setPosIsSet(boolean value) {
    if (!value) {
      this.pos = null;
    }
  }

  public String getProductModel() {
    return this.productModel;
  }

  public APContract setProductModel(String productModel) {
    this.productModel = productModel;
    return this;
  }

  public void unsetProductModel() {
    this.productModel = null;
  }

  /** Returns true if field productModel is set (has been assigned a value) and false otherwise */
  public boolean isSetProductModel() {
    return this.productModel != null;
  }

  public void setProductModelIsSet(boolean value) {
    if (!value) {
      this.productModel = null;
    }
  }

  public String getIp4Addr() {
    return this.ip4Addr;
  }

  public APContract setIp4Addr(String ip4Addr) {
    this.ip4Addr = ip4Addr;
    return this;
  }

  public void unsetIp4Addr() {
    this.ip4Addr = null;
  }

  /** Returns true if field ip4Addr is set (has been assigned a value) and false otherwise */
  public boolean isSetIp4Addr() {
    return this.ip4Addr != null;
  }

  public void setIp4AddrIsSet(boolean value) {
    if (!value) {
      this.ip4Addr = null;
    }
  }

  public String getIp6Addr() {
    return this.ip6Addr;
  }

  public APContract setIp6Addr(String ip6Addr) {
    this.ip6Addr = ip6Addr;
    return this;
  }

  public void unsetIp6Addr() {
    this.ip6Addr = null;
  }

  /** Returns true if field ip6Addr is set (has been assigned a value) and false otherwise */
  public boolean isSetIp6Addr() {
    return this.ip6Addr != null;
  }

  public void setIp6AddrIsSet(boolean value) {
    if (!value) {
      this.ip6Addr = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public APContract setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 
   * @see APType
   */
  public APType getApType() {
    return this.apType;
  }

  /**
   * 
   * @see APType
   */
  public APContract setApType(APType apType) {
    this.apType = apType;
    return this;
  }

  public void unsetApType() {
    this.apType = null;
  }

  /** Returns true if field apType is set (has been assigned a value) and false otherwise */
  public boolean isSetApType() {
    return this.apType != null;
  }

  public void setApTypeIsSet(boolean value) {
    if (!value) {
      this.apType = null;
    }
  }

  public RfidApContract getExtInfo() {
    return this.extInfo;
  }

  public APContract setExtInfo(RfidApContract extInfo) {
    this.extInfo = extInfo;
    return this;
  }

  public void unsetExtInfo() {
    this.extInfo = null;
  }

  /** Returns true if field extInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetExtInfo() {
    return this.extInfo != null;
  }

  public void setExtInfoIsSet(boolean value) {
    if (!value) {
      this.extInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((DevStatus)value);
      }
      break;

    case POS:
      if (value == null) {
        unsetPos();
      } else {
        setPos((PointContract)value);
      }
      break;

    case PRODUCT_MODEL:
      if (value == null) {
        unsetProductModel();
      } else {
        setProductModel((String)value);
      }
      break;

    case IP4_ADDR:
      if (value == null) {
        unsetIp4Addr();
      } else {
        setIp4Addr((String)value);
      }
      break;

    case IP6_ADDR:
      if (value == null) {
        unsetIp6Addr();
      } else {
        setIp6Addr((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case AP_TYPE:
      if (value == null) {
        unsetApType();
      } else {
        setApType((APType)value);
      }
      break;

    case EXT_INFO:
      if (value == null) {
        unsetExtInfo();
      } else {
        setExtInfo((RfidApContract)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case MAC:
      return getMac();

    case STATUS:
      return getStatus();

    case POS:
      return getPos();

    case PRODUCT_MODEL:
      return getProductModel();

    case IP4_ADDR:
      return getIp4Addr();

    case IP6_ADDR:
      return getIp6Addr();

    case REMARK:
      return getRemark();

    case AP_TYPE:
      return getApType();

    case EXT_INFO:
      return getExtInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case MAC:
      return isSetMac();
    case STATUS:
      return isSetStatus();
    case POS:
      return isSetPos();
    case PRODUCT_MODEL:
      return isSetProductModel();
    case IP4_ADDR:
      return isSetIp4Addr();
    case IP6_ADDR:
      return isSetIp6Addr();
    case REMARK:
      return isSetRemark();
    case AP_TYPE:
      return isSetApType();
    case EXT_INFO:
      return isSetExtInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof APContract)
      return this.equals((APContract)that);
    return false;
  }

  public boolean equals(APContract that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_pos = true && this.isSetPos();
    boolean that_present_pos = true && that.isSetPos();
    if (this_present_pos || that_present_pos) {
      if (!(this_present_pos && that_present_pos))
        return false;
      if (!this.pos.equals(that.pos))
        return false;
    }

    boolean this_present_productModel = true && this.isSetProductModel();
    boolean that_present_productModel = true && that.isSetProductModel();
    if (this_present_productModel || that_present_productModel) {
      if (!(this_present_productModel && that_present_productModel))
        return false;
      if (!this.productModel.equals(that.productModel))
        return false;
    }

    boolean this_present_ip4Addr = true && this.isSetIp4Addr();
    boolean that_present_ip4Addr = true && that.isSetIp4Addr();
    if (this_present_ip4Addr || that_present_ip4Addr) {
      if (!(this_present_ip4Addr && that_present_ip4Addr))
        return false;
      if (!this.ip4Addr.equals(that.ip4Addr))
        return false;
    }

    boolean this_present_ip6Addr = true && this.isSetIp6Addr();
    boolean that_present_ip6Addr = true && that.isSetIp6Addr();
    if (this_present_ip6Addr || that_present_ip6Addr) {
      if (!(this_present_ip6Addr && that_present_ip6Addr))
        return false;
      if (!this.ip6Addr.equals(that.ip6Addr))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_apType = true && this.isSetApType();
    boolean that_present_apType = true && that.isSetApType();
    if (this_present_apType || that_present_apType) {
      if (!(this_present_apType && that_present_apType))
        return false;
      if (!this.apType.equals(that.apType))
        return false;
    }

    boolean this_present_extInfo = true && this.isSetExtInfo();
    boolean that_present_extInfo = true && that.isSetExtInfo();
    if (this_present_extInfo || that_present_extInfo) {
      if (!(this_present_extInfo && that_present_extInfo))
        return false;
      if (!this.extInfo.equals(that.extInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(APContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPos()).compareTo(other.isSetPos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pos, other.pos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductModel()).compareTo(other.isSetProductModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productModel, other.productModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp4Addr()).compareTo(other.isSetIp4Addr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp4Addr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip4Addr, other.ip4Addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp6Addr()).compareTo(other.isSetIp6Addr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp6Addr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip6Addr, other.ip6Addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApType()).compareTo(other.isSetApType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apType, other.apType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtInfo()).compareTo(other.isSetExtInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extInfo, other.extInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("APContract(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac:");
    if (this.mac == null) {
      sb.append("null");
    } else {
      sb.append(this.mac);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pos:");
    if (this.pos == null) {
      sb.append("null");
    } else {
      sb.append(this.pos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productModel:");
    if (this.productModel == null) {
      sb.append("null");
    } else {
      sb.append(this.productModel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip4Addr:");
    if (this.ip4Addr == null) {
      sb.append("null");
    } else {
      sb.append(this.ip4Addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip6Addr:");
    if (this.ip6Addr == null) {
      sb.append("null");
    } else {
      sb.append(this.ip6Addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("apType:");
    if (this.apType == null) {
      sb.append("null");
    } else {
      sb.append(this.apType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extInfo:");
    if (this.extInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.extInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pos != null) {
      pos.validate();
    }
    if (extInfo != null) {
      extInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class APContractStandardSchemeFactory implements SchemeFactory {
    public APContractStandardScheme getScheme() {
      return new APContractStandardScheme();
    }
  }

  private static class APContractStandardScheme extends StandardScheme<APContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, APContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac = iprot.readString();
              struct.setMacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = DevStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pos = new PointContract();
              struct.pos.read(iprot);
              struct.setPosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productModel = iprot.readString();
              struct.setProductModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP4_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip4Addr = iprot.readString();
              struct.setIp4AddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IP6_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip6Addr = iprot.readString();
              struct.setIp6AddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.apType = APType.findByValue(iprot.readI32());
              struct.setApTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extInfo = new RfidApContract();
              struct.extInfo.read(iprot);
              struct.setExtInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, APContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.mac != null) {
        oprot.writeFieldBegin(MAC_FIELD_DESC);
        oprot.writeString(struct.mac);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.pos != null) {
        oprot.writeFieldBegin(POS_FIELD_DESC);
        struct.pos.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.productModel != null) {
        oprot.writeFieldBegin(PRODUCT_MODEL_FIELD_DESC);
        oprot.writeString(struct.productModel);
        oprot.writeFieldEnd();
      }
      if (struct.ip4Addr != null) {
        oprot.writeFieldBegin(IP4_ADDR_FIELD_DESC);
        oprot.writeString(struct.ip4Addr);
        oprot.writeFieldEnd();
      }
      if (struct.ip6Addr != null) {
        oprot.writeFieldBegin(IP6_ADDR_FIELD_DESC);
        oprot.writeString(struct.ip6Addr);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.apType != null) {
        oprot.writeFieldBegin(AP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.apType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.extInfo != null) {
        oprot.writeFieldBegin(EXT_INFO_FIELD_DESC);
        struct.extInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class APContractTupleSchemeFactory implements SchemeFactory {
    public APContractTupleScheme getScheme() {
      return new APContractTupleScheme();
    }
  }

  private static class APContractTupleScheme extends TupleScheme<APContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, APContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMac()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetPos()) {
        optionals.set(4);
      }
      if (struct.isSetProductModel()) {
        optionals.set(5);
      }
      if (struct.isSetIp4Addr()) {
        optionals.set(6);
      }
      if (struct.isSetIp6Addr()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetApType()) {
        optionals.set(9);
      }
      if (struct.isSetExtInfo()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMac()) {
        oprot.writeString(struct.mac);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetPos()) {
        struct.pos.write(oprot);
      }
      if (struct.isSetProductModel()) {
        oprot.writeString(struct.productModel);
      }
      if (struct.isSetIp4Addr()) {
        oprot.writeString(struct.ip4Addr);
      }
      if (struct.isSetIp6Addr()) {
        oprot.writeString(struct.ip6Addr);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetApType()) {
        oprot.writeI32(struct.apType.getValue());
      }
      if (struct.isSetExtInfo()) {
        struct.extInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, APContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mac = iprot.readString();
        struct.setMacIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = DevStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pos = new PointContract();
        struct.pos.read(iprot);
        struct.setPosIsSet(true);
      }
      if (incoming.get(5)) {
        struct.productModel = iprot.readString();
        struct.setProductModelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ip4Addr = iprot.readString();
        struct.setIp4AddrIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ip6Addr = iprot.readString();
        struct.setIp6AddrIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.apType = APType.findByValue(iprot.readI32());
        struct.setApTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.extInfo = new RfidApContract();
        struct.extInfo.read(iprot);
        struct.setExtInfoIsSet(true);
      }
    }
  }

}

