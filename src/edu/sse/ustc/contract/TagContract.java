/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.sse.ustc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TagContract implements org.apache.thrift.TBase<TagContract, TagContract._Fields>, java.io.Serializable, Cloneable, Comparable<TagContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TagContract");

  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TAG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tagType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CHARAGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("charageTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TagContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TagContractTupleSchemeFactory());
  }

  public TagIdContract tagId; // required
  public String name; // required
  /**
   * 
   * @see TagType
   */
  public TagType tagType; // required
  public String remark; // required
  public boolean enable; // required
  public String charageTime; // required
  public String rate; // required
  public String model; // required
  public String mac; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAG_ID((short)1, "tagId"),
    NAME((short)2, "name"),
    /**
     * 
     * @see TagType
     */
    TAG_TYPE((short)3, "tagType"),
    REMARK((short)4, "remark"),
    ENABLE((short)5, "enable"),
    CHARAGE_TIME((short)6, "charageTime"),
    RATE((short)7, "rate"),
    MODEL((short)8, "model"),
    MAC((short)9, "mac");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAG_ID
          return TAG_ID;
        case 2: // NAME
          return NAME;
        case 3: // TAG_TYPE
          return TAG_TYPE;
        case 4: // REMARK
          return REMARK;
        case 5: // ENABLE
          return ENABLE;
        case 6: // CHARAGE_TIME
          return CHARAGE_TIME;
        case 7: // RATE
          return RATE;
        case 8: // MODEL
          return MODEL;
        case 9: // MAC
          return MAC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TagIdContract.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tagType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TagType.class)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE, new org.apache.thrift.meta_data.FieldMetaData("enable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHARAGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("charageTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TagContract.class, metaDataMap);
  }

  public TagContract() {
  }

  public TagContract(
    TagIdContract tagId,
    String name,
    TagType tagType,
    String remark,
    boolean enable,
    String charageTime,
    String rate,
    String model,
    String mac)
  {
    this();
    this.tagId = tagId;
    this.name = name;
    this.tagType = tagType;
    this.remark = remark;
    this.enable = enable;
    setEnableIsSet(true);
    this.charageTime = charageTime;
    this.rate = rate;
    this.model = model;
    this.mac = mac;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TagContract(TagContract other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTagId()) {
      this.tagId = new TagIdContract(other.tagId);
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTagType()) {
      this.tagType = other.tagType;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.enable = other.enable;
    if (other.isSetCharageTime()) {
      this.charageTime = other.charageTime;
    }
    if (other.isSetRate()) {
      this.rate = other.rate;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
  }

  public TagContract deepCopy() {
    return new TagContract(this);
  }

  @Override
  public void clear() {
    this.tagId = null;
    this.name = null;
    this.tagType = null;
    this.remark = null;
    setEnableIsSet(false);
    this.enable = false;
    this.charageTime = null;
    this.rate = null;
    this.model = null;
    this.mac = null;
  }

  public TagIdContract getTagId() {
    return this.tagId;
  }

  public TagContract setTagId(TagIdContract tagId) {
    this.tagId = tagId;
    return this;
  }

  public void unsetTagId() {
    this.tagId = null;
  }

  /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
  public boolean isSetTagId() {
    return this.tagId != null;
  }

  public void setTagIdIsSet(boolean value) {
    if (!value) {
      this.tagId = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TagContract setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see TagType
   */
  public TagType getTagType() {
    return this.tagType;
  }

  /**
   * 
   * @see TagType
   */
  public TagContract setTagType(TagType tagType) {
    this.tagType = tagType;
    return this;
  }

  public void unsetTagType() {
    this.tagType = null;
  }

  /** Returns true if field tagType is set (has been assigned a value) and false otherwise */
  public boolean isSetTagType() {
    return this.tagType != null;
  }

  public void setTagTypeIsSet(boolean value) {
    if (!value) {
      this.tagType = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public TagContract setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public boolean isEnable() {
    return this.enable;
  }

  public TagContract setEnable(boolean enable) {
    this.enable = enable;
    setEnableIsSet(true);
    return this;
  }

  public void unsetEnable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLE_ISSET_ID);
  }

  /** Returns true if field enable is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLE_ISSET_ID);
  }

  public void setEnableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLE_ISSET_ID, value);
  }

  public String getCharageTime() {
    return this.charageTime;
  }

  public TagContract setCharageTime(String charageTime) {
    this.charageTime = charageTime;
    return this;
  }

  public void unsetCharageTime() {
    this.charageTime = null;
  }

  /** Returns true if field charageTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCharageTime() {
    return this.charageTime != null;
  }

  public void setCharageTimeIsSet(boolean value) {
    if (!value) {
      this.charageTime = null;
    }
  }

  public String getRate() {
    return this.rate;
  }

  public TagContract setRate(String rate) {
    this.rate = rate;
    return this;
  }

  public void unsetRate() {
    this.rate = null;
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return this.rate != null;
  }

  public void setRateIsSet(boolean value) {
    if (!value) {
      this.rate = null;
    }
  }

  public String getModel() {
    return this.model;
  }

  public TagContract setModel(String model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public String getMac() {
    return this.mac;
  }

  public TagContract setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been assigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAG_ID:
      if (value == null) {
        unsetTagId();
      } else {
        setTagId((TagIdContract)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TAG_TYPE:
      if (value == null) {
        unsetTagType();
      } else {
        setTagType((TagType)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ENABLE:
      if (value == null) {
        unsetEnable();
      } else {
        setEnable((Boolean)value);
      }
      break;

    case CHARAGE_TIME:
      if (value == null) {
        unsetCharageTime();
      } else {
        setCharageTime((String)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((String)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAG_ID:
      return getTagId();

    case NAME:
      return getName();

    case TAG_TYPE:
      return getTagType();

    case REMARK:
      return getRemark();

    case ENABLE:
      return Boolean.valueOf(isEnable());

    case CHARAGE_TIME:
      return getCharageTime();

    case RATE:
      return getRate();

    case MODEL:
      return getModel();

    case MAC:
      return getMac();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAG_ID:
      return isSetTagId();
    case NAME:
      return isSetName();
    case TAG_TYPE:
      return isSetTagType();
    case REMARK:
      return isSetRemark();
    case ENABLE:
      return isSetEnable();
    case CHARAGE_TIME:
      return isSetCharageTime();
    case RATE:
      return isSetRate();
    case MODEL:
      return isSetModel();
    case MAC:
      return isSetMac();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TagContract)
      return this.equals((TagContract)that);
    return false;
  }

  public boolean equals(TagContract that) {
    if (that == null)
      return false;

    boolean this_present_tagId = true && this.isSetTagId();
    boolean that_present_tagId = true && that.isSetTagId();
    if (this_present_tagId || that_present_tagId) {
      if (!(this_present_tagId && that_present_tagId))
        return false;
      if (!this.tagId.equals(that.tagId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_tagType = true && this.isSetTagType();
    boolean that_present_tagType = true && that.isSetTagType();
    if (this_present_tagType || that_present_tagType) {
      if (!(this_present_tagType && that_present_tagType))
        return false;
      if (!this.tagType.equals(that.tagType))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_enable = true;
    boolean that_present_enable = true;
    if (this_present_enable || that_present_enable) {
      if (!(this_present_enable && that_present_enable))
        return false;
      if (this.enable != that.enable)
        return false;
    }

    boolean this_present_charageTime = true && this.isSetCharageTime();
    boolean that_present_charageTime = true && that.isSetCharageTime();
    if (this_present_charageTime || that_present_charageTime) {
      if (!(this_present_charageTime && that_present_charageTime))
        return false;
      if (!this.charageTime.equals(that.charageTime))
        return false;
    }

    boolean this_present_rate = true && this.isSetRate();
    boolean that_present_rate = true && that.isSetRate();
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (!this.rate.equals(that.rate))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TagContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTagId()).compareTo(other.isSetTagId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, other.tagId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagType()).compareTo(other.isSetTagType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagType, other.tagType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnable()).compareTo(other.isSetEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable, other.enable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCharageTime()).compareTo(other.isSetCharageTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCharageTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charageTime, other.charageTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TagContract(");
    boolean first = true;

    sb.append("tagId:");
    if (this.tagId == null) {
      sb.append("null");
    } else {
      sb.append(this.tagId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagType:");
    if (this.tagType == null) {
      sb.append("null");
    } else {
      sb.append(this.tagType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enable:");
    sb.append(this.enable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("charageTime:");
    if (this.charageTime == null) {
      sb.append("null");
    } else {
      sb.append(this.charageTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    if (this.rate == null) {
      sb.append("null");
    } else {
      sb.append(this.rate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac:");
    if (this.mac == null) {
      sb.append("null");
    } else {
      sb.append(this.mac);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tagId != null) {
      tagId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TagContractStandardSchemeFactory implements SchemeFactory {
    public TagContractStandardScheme getScheme() {
      return new TagContractStandardScheme();
    }
  }

  private static class TagContractStandardScheme extends StandardScheme<TagContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TagContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tagId = new TagIdContract();
              struct.tagId.read(iprot);
              struct.setTagIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tagType = TagType.findByValue(iprot.readI32());
              struct.setTagTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable = iprot.readBool();
              struct.setEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHARAGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.charageTime = iprot.readString();
              struct.setCharageTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rate = iprot.readString();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.model = iprot.readString();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac = iprot.readString();
              struct.setMacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TagContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tagId != null) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        struct.tagId.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.tagType != null) {
        oprot.writeFieldBegin(TAG_TYPE_FIELD_DESC);
        oprot.writeI32(struct.tagType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENABLE_FIELD_DESC);
      oprot.writeBool(struct.enable);
      oprot.writeFieldEnd();
      if (struct.charageTime != null) {
        oprot.writeFieldBegin(CHARAGE_TIME_FIELD_DESC);
        oprot.writeString(struct.charageTime);
        oprot.writeFieldEnd();
      }
      if (struct.rate != null) {
        oprot.writeFieldBegin(RATE_FIELD_DESC);
        oprot.writeString(struct.rate);
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        oprot.writeString(struct.model);
        oprot.writeFieldEnd();
      }
      if (struct.mac != null) {
        oprot.writeFieldBegin(MAC_FIELD_DESC);
        oprot.writeString(struct.mac);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TagContractTupleSchemeFactory implements SchemeFactory {
    public TagContractTupleScheme getScheme() {
      return new TagContractTupleScheme();
    }
  }

  private static class TagContractTupleScheme extends TupleScheme<TagContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TagContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTagId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetTagType()) {
        optionals.set(2);
      }
      if (struct.isSetRemark()) {
        optionals.set(3);
      }
      if (struct.isSetEnable()) {
        optionals.set(4);
      }
      if (struct.isSetCharageTime()) {
        optionals.set(5);
      }
      if (struct.isSetRate()) {
        optionals.set(6);
      }
      if (struct.isSetModel()) {
        optionals.set(7);
      }
      if (struct.isSetMac()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTagId()) {
        struct.tagId.write(oprot);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTagType()) {
        oprot.writeI32(struct.tagType.getValue());
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetEnable()) {
        oprot.writeBool(struct.enable);
      }
      if (struct.isSetCharageTime()) {
        oprot.writeString(struct.charageTime);
      }
      if (struct.isSetRate()) {
        oprot.writeString(struct.rate);
      }
      if (struct.isSetModel()) {
        oprot.writeString(struct.model);
      }
      if (struct.isSetMac()) {
        oprot.writeString(struct.mac);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TagContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.tagId = new TagIdContract();
        struct.tagId.read(iprot);
        struct.setTagIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tagType = TagType.findByValue(iprot.readI32());
        struct.setTagTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.enable = iprot.readBool();
        struct.setEnableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.charageTime = iprot.readString();
        struct.setCharageTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rate = iprot.readString();
        struct.setRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.model = iprot.readString();
        struct.setModelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mac = iprot.readString();
        struct.setMacIsSet(true);
      }
    }
  }

}

