/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.sse.ustc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MapContract implements org.apache.thrift.TBase<MapContract, MapContract._Fields>, java.io.Serializable, Cloneable, Comparable<MapContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MapContract");

  private static final org.apache.thrift.protocol.TField ENVIRONMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("environmentId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mapId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mapType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FATHER_MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fatherMapId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAP_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("mapFormat", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MAP_SIZE_IN_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("mapSizeInByte", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("scale", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LINK_SEGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("linkSegment", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField MAP_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("mapImage", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MapContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MapContractTupleSchemeFactory());
  }

  public int environmentId; // required
  public int mapId; // required
  public String name; // required
  /**
   * 
   * @see MapType
   */
  public MapType mapType; // required
  public int fatherMapId; // required
  /**
   * 
   * @see MapFormat
   */
  public MapFormat mapFormat; // required
  public int mapSizeInByte; // required
  public int width; // required
  public int height; // required
  public int scale; // required
  public String remark; // required
  public List<LinkSegmentContract> linkSegment; // required
  public String mapImage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENVIRONMENT_ID((short)1, "environmentId"),
    MAP_ID((short)2, "mapId"),
    NAME((short)3, "name"),
    /**
     * 
     * @see MapType
     */
    MAP_TYPE((short)4, "mapType"),
    FATHER_MAP_ID((short)5, "fatherMapId"),
    /**
     * 
     * @see MapFormat
     */
    MAP_FORMAT((short)6, "mapFormat"),
    MAP_SIZE_IN_BYTE((short)7, "mapSizeInByte"),
    WIDTH((short)8, "width"),
    HEIGHT((short)9, "height"),
    SCALE((short)10, "scale"),
    REMARK((short)11, "remark"),
    LINK_SEGMENT((short)12, "linkSegment"),
    MAP_IMAGE((short)13, "mapImage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENVIRONMENT_ID
          return ENVIRONMENT_ID;
        case 2: // MAP_ID
          return MAP_ID;
        case 3: // NAME
          return NAME;
        case 4: // MAP_TYPE
          return MAP_TYPE;
        case 5: // FATHER_MAP_ID
          return FATHER_MAP_ID;
        case 6: // MAP_FORMAT
          return MAP_FORMAT;
        case 7: // MAP_SIZE_IN_BYTE
          return MAP_SIZE_IN_BYTE;
        case 8: // WIDTH
          return WIDTH;
        case 9: // HEIGHT
          return HEIGHT;
        case 10: // SCALE
          return SCALE;
        case 11: // REMARK
          return REMARK;
        case 12: // LINK_SEGMENT
          return LINK_SEGMENT;
        case 13: // MAP_IMAGE
          return MAP_IMAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENVIRONMENTID_ISSET_ID = 0;
  private static final int __MAPID_ISSET_ID = 1;
  private static final int __FATHERMAPID_ISSET_ID = 2;
  private static final int __MAPSIZEINBYTE_ISSET_ID = 3;
  private static final int __WIDTH_ISSET_ID = 4;
  private static final int __HEIGHT_ISSET_ID = 5;
  private static final int __SCALE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENVIRONMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("environmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("mapId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mapType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MapType.class)));
    tmpMap.put(_Fields.FATHER_MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("fatherMapId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAP_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("mapFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MapFormat.class)));
    tmpMap.put(_Fields.MAP_SIZE_IN_BYTE, new org.apache.thrift.meta_data.FieldMetaData("mapSizeInByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("scale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_SEGMENT, new org.apache.thrift.meta_data.FieldMetaData("linkSegment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LinkSegmentContract.class))));
    tmpMap.put(_Fields.MAP_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("mapImage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MapContract.class, metaDataMap);
  }

  public MapContract() {
  }

  public MapContract(
    int environmentId,
    int mapId,
    String name,
    MapType mapType,
    int fatherMapId,
    MapFormat mapFormat,
    int mapSizeInByte,
    int width,
    int height,
    int scale,
    String remark,
    List<LinkSegmentContract> linkSegment,
    String mapImage)
  {
    this();
    this.environmentId = environmentId;
    setEnvironmentIdIsSet(true);
    this.mapId = mapId;
    setMapIdIsSet(true);
    this.name = name;
    this.mapType = mapType;
    this.fatherMapId = fatherMapId;
    setFatherMapIdIsSet(true);
    this.mapFormat = mapFormat;
    this.mapSizeInByte = mapSizeInByte;
    setMapSizeInByteIsSet(true);
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.scale = scale;
    setScaleIsSet(true);
    this.remark = remark;
    this.linkSegment = linkSegment;
    this.mapImage = mapImage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapContract(MapContract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.environmentId = other.environmentId;
    this.mapId = other.mapId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMapType()) {
      this.mapType = other.mapType;
    }
    this.fatherMapId = other.fatherMapId;
    if (other.isSetMapFormat()) {
      this.mapFormat = other.mapFormat;
    }
    this.mapSizeInByte = other.mapSizeInByte;
    this.width = other.width;
    this.height = other.height;
    this.scale = other.scale;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetLinkSegment()) {
      List<LinkSegmentContract> __this__linkSegment = new ArrayList<LinkSegmentContract>(other.linkSegment.size());
      for (LinkSegmentContract other_element : other.linkSegment) {
        __this__linkSegment.add(new LinkSegmentContract(other_element));
      }
      this.linkSegment = __this__linkSegment;
    }
    if (other.isSetMapImage()) {
      this.mapImage = other.mapImage;
    }
  }

  public MapContract deepCopy() {
    return new MapContract(this);
  }

  @Override
  public void clear() {
    setEnvironmentIdIsSet(false);
    this.environmentId = 0;
    setMapIdIsSet(false);
    this.mapId = 0;
    this.name = null;
    this.mapType = null;
    setFatherMapIdIsSet(false);
    this.fatherMapId = 0;
    this.mapFormat = null;
    setMapSizeInByteIsSet(false);
    this.mapSizeInByte = 0;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    setScaleIsSet(false);
    this.scale = 0;
    this.remark = null;
    this.linkSegment = null;
    this.mapImage = null;
  }

  public int getEnvironmentId() {
    return this.environmentId;
  }

  public MapContract setEnvironmentId(int environmentId) {
    this.environmentId = environmentId;
    setEnvironmentIdIsSet(true);
    return this;
  }

  public void unsetEnvironmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENVIRONMENTID_ISSET_ID);
  }

  /** Returns true if field environmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvironmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __ENVIRONMENTID_ISSET_ID);
  }

  public void setEnvironmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENVIRONMENTID_ISSET_ID, value);
  }

  public int getMapId() {
    return this.mapId;
  }

  public MapContract setMapId(int mapId) {
    this.mapId = mapId;
    setMapIdIsSet(true);
    return this;
  }

  public void unsetMapId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPID_ISSET_ID);
  }

  /** Returns true if field mapId is set (has been assigned a value) and false otherwise */
  public boolean isSetMapId() {
    return EncodingUtils.testBit(__isset_bitfield, __MAPID_ISSET_ID);
  }

  public void setMapIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public MapContract setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see MapType
   */
  public MapType getMapType() {
    return this.mapType;
  }

  /**
   * 
   * @see MapType
   */
  public MapContract setMapType(MapType mapType) {
    this.mapType = mapType;
    return this;
  }

  public void unsetMapType() {
    this.mapType = null;
  }

  /** Returns true if field mapType is set (has been assigned a value) and false otherwise */
  public boolean isSetMapType() {
    return this.mapType != null;
  }

  public void setMapTypeIsSet(boolean value) {
    if (!value) {
      this.mapType = null;
    }
  }

  public int getFatherMapId() {
    return this.fatherMapId;
  }

  public MapContract setFatherMapId(int fatherMapId) {
    this.fatherMapId = fatherMapId;
    setFatherMapIdIsSet(true);
    return this;
  }

  public void unsetFatherMapId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FATHERMAPID_ISSET_ID);
  }

  /** Returns true if field fatherMapId is set (has been assigned a value) and false otherwise */
  public boolean isSetFatherMapId() {
    return EncodingUtils.testBit(__isset_bitfield, __FATHERMAPID_ISSET_ID);
  }

  public void setFatherMapIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FATHERMAPID_ISSET_ID, value);
  }

  /**
   * 
   * @see MapFormat
   */
  public MapFormat getMapFormat() {
    return this.mapFormat;
  }

  /**
   * 
   * @see MapFormat
   */
  public MapContract setMapFormat(MapFormat mapFormat) {
    this.mapFormat = mapFormat;
    return this;
  }

  public void unsetMapFormat() {
    this.mapFormat = null;
  }

  /** Returns true if field mapFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetMapFormat() {
    return this.mapFormat != null;
  }

  public void setMapFormatIsSet(boolean value) {
    if (!value) {
      this.mapFormat = null;
    }
  }

  public int getMapSizeInByte() {
    return this.mapSizeInByte;
  }

  public MapContract setMapSizeInByte(int mapSizeInByte) {
    this.mapSizeInByte = mapSizeInByte;
    setMapSizeInByteIsSet(true);
    return this;
  }

  public void unsetMapSizeInByte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPSIZEINBYTE_ISSET_ID);
  }

  /** Returns true if field mapSizeInByte is set (has been assigned a value) and false otherwise */
  public boolean isSetMapSizeInByte() {
    return EncodingUtils.testBit(__isset_bitfield, __MAPSIZEINBYTE_ISSET_ID);
  }

  public void setMapSizeInByteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPSIZEINBYTE_ISSET_ID, value);
  }

  public int getWidth() {
    return this.width;
  }

  public MapContract setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public MapContract setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public int getScale() {
    return this.scale;
  }

  public MapContract setScale(int scale) {
    this.scale = scale;
    setScaleIsSet(true);
    return this;
  }

  public void unsetScale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  /** Returns true if field scale is set (has been assigned a value) and false otherwise */
  public boolean isSetScale() {
    return EncodingUtils.testBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  public void setScaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCALE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public MapContract setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getLinkSegmentSize() {
    return (this.linkSegment == null) ? 0 : this.linkSegment.size();
  }

  public java.util.Iterator<LinkSegmentContract> getLinkSegmentIterator() {
    return (this.linkSegment == null) ? null : this.linkSegment.iterator();
  }

  public void addToLinkSegment(LinkSegmentContract elem) {
    if (this.linkSegment == null) {
      this.linkSegment = new ArrayList<LinkSegmentContract>();
    }
    this.linkSegment.add(elem);
  }

  public List<LinkSegmentContract> getLinkSegment() {
    return this.linkSegment;
  }

  public MapContract setLinkSegment(List<LinkSegmentContract> linkSegment) {
    this.linkSegment = linkSegment;
    return this;
  }

  public void unsetLinkSegment() {
    this.linkSegment = null;
  }

  /** Returns true if field linkSegment is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkSegment() {
    return this.linkSegment != null;
  }

  public void setLinkSegmentIsSet(boolean value) {
    if (!value) {
      this.linkSegment = null;
    }
  }

  public String getMapImage() {
    return this.mapImage;
  }

  public MapContract setMapImage(String mapImage) {
    this.mapImage = mapImage;
    return this;
  }

  public void unsetMapImage() {
    this.mapImage = null;
  }

  /** Returns true if field mapImage is set (has been assigned a value) and false otherwise */
  public boolean isSetMapImage() {
    return this.mapImage != null;
  }

  public void setMapImageIsSet(boolean value) {
    if (!value) {
      this.mapImage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENVIRONMENT_ID:
      if (value == null) {
        unsetEnvironmentId();
      } else {
        setEnvironmentId((Integer)value);
      }
      break;

    case MAP_ID:
      if (value == null) {
        unsetMapId();
      } else {
        setMapId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MAP_TYPE:
      if (value == null) {
        unsetMapType();
      } else {
        setMapType((MapType)value);
      }
      break;

    case FATHER_MAP_ID:
      if (value == null) {
        unsetFatherMapId();
      } else {
        setFatherMapId((Integer)value);
      }
      break;

    case MAP_FORMAT:
      if (value == null) {
        unsetMapFormat();
      } else {
        setMapFormat((MapFormat)value);
      }
      break;

    case MAP_SIZE_IN_BYTE:
      if (value == null) {
        unsetMapSizeInByte();
      } else {
        setMapSizeInByte((Integer)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case SCALE:
      if (value == null) {
        unsetScale();
      } else {
        setScale((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case LINK_SEGMENT:
      if (value == null) {
        unsetLinkSegment();
      } else {
        setLinkSegment((List<LinkSegmentContract>)value);
      }
      break;

    case MAP_IMAGE:
      if (value == null) {
        unsetMapImage();
      } else {
        setMapImage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENVIRONMENT_ID:
      return Integer.valueOf(getEnvironmentId());

    case MAP_ID:
      return Integer.valueOf(getMapId());

    case NAME:
      return getName();

    case MAP_TYPE:
      return getMapType();

    case FATHER_MAP_ID:
      return Integer.valueOf(getFatherMapId());

    case MAP_FORMAT:
      return getMapFormat();

    case MAP_SIZE_IN_BYTE:
      return Integer.valueOf(getMapSizeInByte());

    case WIDTH:
      return Integer.valueOf(getWidth());

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case SCALE:
      return Integer.valueOf(getScale());

    case REMARK:
      return getRemark();

    case LINK_SEGMENT:
      return getLinkSegment();

    case MAP_IMAGE:
      return getMapImage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENVIRONMENT_ID:
      return isSetEnvironmentId();
    case MAP_ID:
      return isSetMapId();
    case NAME:
      return isSetName();
    case MAP_TYPE:
      return isSetMapType();
    case FATHER_MAP_ID:
      return isSetFatherMapId();
    case MAP_FORMAT:
      return isSetMapFormat();
    case MAP_SIZE_IN_BYTE:
      return isSetMapSizeInByte();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case SCALE:
      return isSetScale();
    case REMARK:
      return isSetRemark();
    case LINK_SEGMENT:
      return isSetLinkSegment();
    case MAP_IMAGE:
      return isSetMapImage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MapContract)
      return this.equals((MapContract)that);
    return false;
  }

  public boolean equals(MapContract that) {
    if (that == null)
      return false;

    boolean this_present_environmentId = true;
    boolean that_present_environmentId = true;
    if (this_present_environmentId || that_present_environmentId) {
      if (!(this_present_environmentId && that_present_environmentId))
        return false;
      if (this.environmentId != that.environmentId)
        return false;
    }

    boolean this_present_mapId = true;
    boolean that_present_mapId = true;
    if (this_present_mapId || that_present_mapId) {
      if (!(this_present_mapId && that_present_mapId))
        return false;
      if (this.mapId != that.mapId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mapType = true && this.isSetMapType();
    boolean that_present_mapType = true && that.isSetMapType();
    if (this_present_mapType || that_present_mapType) {
      if (!(this_present_mapType && that_present_mapType))
        return false;
      if (!this.mapType.equals(that.mapType))
        return false;
    }

    boolean this_present_fatherMapId = true;
    boolean that_present_fatherMapId = true;
    if (this_present_fatherMapId || that_present_fatherMapId) {
      if (!(this_present_fatherMapId && that_present_fatherMapId))
        return false;
      if (this.fatherMapId != that.fatherMapId)
        return false;
    }

    boolean this_present_mapFormat = true && this.isSetMapFormat();
    boolean that_present_mapFormat = true && that.isSetMapFormat();
    if (this_present_mapFormat || that_present_mapFormat) {
      if (!(this_present_mapFormat && that_present_mapFormat))
        return false;
      if (!this.mapFormat.equals(that.mapFormat))
        return false;
    }

    boolean this_present_mapSizeInByte = true;
    boolean that_present_mapSizeInByte = true;
    if (this_present_mapSizeInByte || that_present_mapSizeInByte) {
      if (!(this_present_mapSizeInByte && that_present_mapSizeInByte))
        return false;
      if (this.mapSizeInByte != that.mapSizeInByte)
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_scale = true;
    boolean that_present_scale = true;
    if (this_present_scale || that_present_scale) {
      if (!(this_present_scale && that_present_scale))
        return false;
      if (this.scale != that.scale)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_linkSegment = true && this.isSetLinkSegment();
    boolean that_present_linkSegment = true && that.isSetLinkSegment();
    if (this_present_linkSegment || that_present_linkSegment) {
      if (!(this_present_linkSegment && that_present_linkSegment))
        return false;
      if (!this.linkSegment.equals(that.linkSegment))
        return false;
    }

    boolean this_present_mapImage = true && this.isSetMapImage();
    boolean that_present_mapImage = true && that.isSetMapImage();
    if (this_present_mapImage || that_present_mapImage) {
      if (!(this_present_mapImage && that_present_mapImage))
        return false;
      if (!this.mapImage.equals(that.mapImage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MapContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEnvironmentId()).compareTo(other.isSetEnvironmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvironmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.environmentId, other.environmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapId()).compareTo(other.isSetMapId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapId, other.mapId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapType()).compareTo(other.isSetMapType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapType, other.mapType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFatherMapId()).compareTo(other.isSetFatherMapId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFatherMapId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fatherMapId, other.fatherMapId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapFormat()).compareTo(other.isSetMapFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapFormat, other.mapFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapSizeInByte()).compareTo(other.isSetMapSizeInByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapSizeInByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapSizeInByte, other.mapSizeInByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScale()).compareTo(other.isSetScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scale, other.scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkSegment()).compareTo(other.isSetLinkSegment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkSegment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkSegment, other.linkSegment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapImage()).compareTo(other.isSetMapImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapImage, other.mapImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MapContract(");
    boolean first = true;

    sb.append("environmentId:");
    sb.append(this.environmentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapId:");
    sb.append(this.mapId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapType:");
    if (this.mapType == null) {
      sb.append("null");
    } else {
      sb.append(this.mapType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fatherMapId:");
    sb.append(this.fatherMapId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapFormat:");
    if (this.mapFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.mapFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapSizeInByte:");
    sb.append(this.mapSizeInByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scale:");
    sb.append(this.scale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkSegment:");
    if (this.linkSegment == null) {
      sb.append("null");
    } else {
      sb.append(this.linkSegment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapImage:");
    if (this.mapImage == null) {
      sb.append("null");
    } else {
      sb.append(this.mapImage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MapContractStandardSchemeFactory implements SchemeFactory {
    public MapContractStandardScheme getScheme() {
      return new MapContractStandardScheme();
    }
  }

  private static class MapContractStandardScheme extends StandardScheme<MapContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MapContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENVIRONMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.environmentId = iprot.readI32();
              struct.setEnvironmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapId = iprot.readI32();
              struct.setMapIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapType = MapType.findByValue(iprot.readI32());
              struct.setMapTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FATHER_MAP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fatherMapId = iprot.readI32();
              struct.setFatherMapIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAP_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapFormat = MapFormat.findByValue(iprot.readI32());
              struct.setMapFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAP_SIZE_IN_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mapSizeInByte = iprot.readI32();
              struct.setMapSizeInByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scale = iprot.readI32();
              struct.setScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LINK_SEGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.linkSegment = new ArrayList<LinkSegmentContract>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  LinkSegmentContract _elem2;
                  _elem2 = new LinkSegmentContract();
                  _elem2.read(iprot);
                  struct.linkSegment.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setLinkSegmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAP_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mapImage = iprot.readString();
              struct.setMapImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MapContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ENVIRONMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.environmentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAP_ID_FIELD_DESC);
      oprot.writeI32(struct.mapId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.mapType != null) {
        oprot.writeFieldBegin(MAP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.mapType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FATHER_MAP_ID_FIELD_DESC);
      oprot.writeI32(struct.fatherMapId);
      oprot.writeFieldEnd();
      if (struct.mapFormat != null) {
        oprot.writeFieldBegin(MAP_FORMAT_FIELD_DESC);
        oprot.writeI32(struct.mapFormat.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAP_SIZE_IN_BYTE_FIELD_DESC);
      oprot.writeI32(struct.mapSizeInByte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCALE_FIELD_DESC);
      oprot.writeI32(struct.scale);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.linkSegment != null) {
        oprot.writeFieldBegin(LINK_SEGMENT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.linkSegment.size()));
          for (LinkSegmentContract _iter3 : struct.linkSegment)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapImage != null) {
        oprot.writeFieldBegin(MAP_IMAGE_FIELD_DESC);
        oprot.writeString(struct.mapImage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MapContractTupleSchemeFactory implements SchemeFactory {
    public MapContractTupleScheme getScheme() {
      return new MapContractTupleScheme();
    }
  }

  private static class MapContractTupleScheme extends TupleScheme<MapContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MapContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEnvironmentId()) {
        optionals.set(0);
      }
      if (struct.isSetMapId()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetMapType()) {
        optionals.set(3);
      }
      if (struct.isSetFatherMapId()) {
        optionals.set(4);
      }
      if (struct.isSetMapFormat()) {
        optionals.set(5);
      }
      if (struct.isSetMapSizeInByte()) {
        optionals.set(6);
      }
      if (struct.isSetWidth()) {
        optionals.set(7);
      }
      if (struct.isSetHeight()) {
        optionals.set(8);
      }
      if (struct.isSetScale()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetLinkSegment()) {
        optionals.set(11);
      }
      if (struct.isSetMapImage()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetEnvironmentId()) {
        oprot.writeI32(struct.environmentId);
      }
      if (struct.isSetMapId()) {
        oprot.writeI32(struct.mapId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMapType()) {
        oprot.writeI32(struct.mapType.getValue());
      }
      if (struct.isSetFatherMapId()) {
        oprot.writeI32(struct.fatherMapId);
      }
      if (struct.isSetMapFormat()) {
        oprot.writeI32(struct.mapFormat.getValue());
      }
      if (struct.isSetMapSizeInByte()) {
        oprot.writeI32(struct.mapSizeInByte);
      }
      if (struct.isSetWidth()) {
        oprot.writeI32(struct.width);
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetScale()) {
        oprot.writeI32(struct.scale);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetLinkSegment()) {
        {
          oprot.writeI32(struct.linkSegment.size());
          for (LinkSegmentContract _iter4 : struct.linkSegment)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetMapImage()) {
        oprot.writeString(struct.mapImage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MapContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.environmentId = iprot.readI32();
        struct.setEnvironmentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mapId = iprot.readI32();
        struct.setMapIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mapType = MapType.findByValue(iprot.readI32());
        struct.setMapTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fatherMapId = iprot.readI32();
        struct.setFatherMapIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mapFormat = MapFormat.findByValue(iprot.readI32());
        struct.setMapFormatIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mapSizeInByte = iprot.readI32();
        struct.setMapSizeInByteIsSet(true);
      }
      if (incoming.get(7)) {
        struct.width = iprot.readI32();
        struct.setWidthIsSet(true);
      }
      if (incoming.get(8)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(9)) {
        struct.scale = iprot.readI32();
        struct.setScaleIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.linkSegment = new ArrayList<LinkSegmentContract>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            LinkSegmentContract _elem7;
            _elem7 = new LinkSegmentContract();
            _elem7.read(iprot);
            struct.linkSegment.add(_elem7);
          }
        }
        struct.setLinkSegmentIsSet(true);
      }
      if (incoming.get(12)) {
        struct.mapImage = iprot.readString();
        struct.setMapImageIsSet(true);
      }
    }
  }

}

